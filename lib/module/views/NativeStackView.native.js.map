{"version":3,"sources":["NativeStackView.native.tsx"],"names":["getDefaultHeaderHeight","getHeaderTitle","HeaderHeightContext","HeaderShownContext","SafeAreaProviderCompat","NavigationContext","NavigationRouteContext","StackActions","useTheme","React","Platform","StyleSheet","View","useSafeAreaFrame","useSafeAreaInsets","Screen","DefaultScreen","ScreenContext","ScreenStack","warnOnce","DebugContainer","HeaderConfig","isAndroid","OS","MaybeNestedStack","options","route","presentation","headerHeight","children","colors","header","headerShown","contentStyle","isHeaderInModal","undefined","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","ContextScreen","useContext","absoluteFill","SceneView","descriptor","previousDescriptor","index","onWillDisappear","onAppear","onDisappear","onDismissed","navigation","render","animation","animationTypeForReplace","customAnimationOnGesture","fullScreenGestureEnabled","gestureEnabled","orientation","statusBarAnimation","statusBarHidden","statusBarStyle","isHeaderInPush","insets","frame","isModal","isIPhone","isPad","isTVOS","isLandscape","width","height","topInset","top","isParentHeaderShown","parentHeaderHeight","defaultHeaderHeight","customHeaderHeight","setCustomHeaderHeight","useState","key","e","nativeEvent","layout","back","title","NativeStackViewInner","state","descriptors","nextDismissedKey","setNextDismissedKey","dismissedRouteName","routes","find","message","console","error","map","previousKey","emit","type","data","closing","target","event","dispatch","pop","dismissCount","source","NativeStackView","props","create","flex"],"mappings":"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","sourcesContent":["import {\n  getDefaultHeaderHeight,\n  getHeaderTitle,\n  HeaderHeightContext,\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport type { ScreenProps } from 'react-native-screens';\nimport {\n  Screen as DefaultScreen,\n  ScreenContext,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport warnOnce from 'warn-once';\n\nimport type {\n  NativeStackDescriptor,\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport DebugContainer from './DebugContainer';\nimport HeaderConfig from './HeaderConfig';\n\nconst isAndroid = Platform.OS === 'android';\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  headerHeight,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  headerHeight: number;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { header, headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true && header === undefined;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <DebugContainer\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </DebugContainer>\n  );\n\n  const ContextScreen = React.useContext(ScreenContext);\n  const Screen = ContextScreen || DefaultScreen;\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig\n            {...options}\n            route={route}\n            headerHeight={headerHeight}\n            canGoBack\n          />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype SceneViewProps = {\n  index: number;\n  descriptor: NativeStackDescriptor;\n  previousDescriptor?: NativeStackDescriptor;\n  onWillDisappear: () => void;\n  onAppear: () => void;\n  onDisappear: () => void;\n  onDismissed: ScreenProps['onDismissed'];\n};\n\nconst SceneView = ({\n  descriptor,\n  previousDescriptor,\n  index,\n  onWillDisappear,\n  onAppear,\n  onDisappear,\n  onDismissed,\n}: SceneViewProps) => {\n  const { route, navigation, options, render } = descriptor;\n  const {\n    animation,\n    animationTypeForReplace = 'push',\n    customAnimationOnGesture,\n    fullScreenGestureEnabled,\n    gestureEnabled,\n    header,\n    headerShown,\n    orientation,\n    statusBarAnimation,\n    statusBarHidden,\n    statusBarStyle,\n  } = options;\n\n  let { presentation = 'card' } = options;\n\n  if (index === 0) {\n    // first screen should always be treated as `card`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `card`\n    presentation = 'card';\n  }\n\n  const isHeaderInPush = isAndroid\n    ? headerShown\n    : presentation === 'card' && headerShown !== false;\n\n  const insets = useSafeAreaInsets();\n  const frame = useSafeAreaFrame();\n\n  // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.\n  const isModal = presentation === 'modal' || presentation === 'formSheet';\n\n  // Modals are fullscreen in landscape only on iPhone\n  const isIPhone =\n    Platform.OS === 'ios' && !(Platform.isPad && Platform.isTVOS);\n  const isLandscape = frame.width > frame.height;\n\n  const topInset = isModal || (isIPhone && isLandscape) ? 0 : insets.top;\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const defaultHeaderHeight = getDefaultHeaderHeight(frame, isModal, topInset);\n\n  const [customHeaderHeight, setCustomHeaderHeight] =\n    React.useState(defaultHeaderHeight);\n\n  const headerHeight = header ? customHeaderHeight : defaultHeaderHeight;\n\n  const ContextScreen = React.useContext(ScreenContext);\n  const Screen = ContextScreen || DefaultScreen;\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      style={StyleSheet.absoluteFill}\n      customAnimationOnSwipe={customAnimationOnGesture}\n      fullScreenSwipeEnabled={fullScreenGestureEnabled}\n      gestureEnabled={\n        isAndroid\n          ? // This prop enables handling of system back gestures on Android\n            // Since we handle them in JS side, we disable this\n            false\n          : gestureEnabled\n      }\n      replaceAnimation={animationTypeForReplace}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n      stackAnimation={animation}\n      screenOrientation={orientation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      onWillDisappear={onWillDisappear}\n      onAppear={onAppear}\n      onDisappear={onDisappear}\n      onDismissed={onDismissed}\n      isNativeStack\n    >\n      <NavigationContext.Provider value={navigation}>\n        <NavigationRouteContext.Provider value={route}>\n          <HeaderShownContext.Provider\n            value={isParentHeaderShown || isHeaderInPush !== false}\n          >\n            <HeaderHeightContext.Provider\n              value={\n                isHeaderInPush !== false\n                  ? headerHeight\n                  : parentHeaderHeight ?? 0\n              }\n            >\n              {header !== undefined && headerShown !== false ? (\n                <View\n                  onLayout={(e) => {\n                    setCustomHeaderHeight(e.nativeEvent.layout.height);\n                  }}\n                >\n                  {header({\n                    back: previousDescriptor\n                      ? {\n                          title: getHeaderTitle(\n                            previousDescriptor.options,\n                            previousDescriptor.route.name\n                          ),\n                        }\n                      : undefined,\n                    options,\n                    route,\n                    navigation,\n                  })}\n                </View>\n              ) : (\n                <HeaderConfig\n                  {...options}\n                  route={route}\n                  headerShown={isHeaderInPush}\n                  headerHeight={headerHeight}\n                  canGoBack={index !== 0}\n                />\n              )}\n              <MaybeNestedStack\n                options={options}\n                route={route}\n                presentation={presentation}\n                headerHeight={headerHeight}\n              >\n                {render()}\n              </MaybeNestedStack>\n            </HeaderHeightContext.Provider>\n          </HeaderShownContext.Provider>\n        </NavigationRouteContext.Provider>\n      </NavigationContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  const [nextDismissedKey, setNextDismissedKey] = React.useState<string | null>(\n    null\n  );\n\n  const dismissedRouteName = nextDismissedKey\n    ? state.routes.find((route) => route.key === nextDismissedKey)?.name\n    : null;\n\n  React.useEffect(() => {\n    if (dismissedRouteName) {\n      const message =\n        `The screen '${dismissedRouteName}' was removed natively but didn't get removed from JS state. ` +\n        `This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\\n\\n` +\n        `Consider using 'gestureEnabled: false' to prevent back gesture and use a custom back button with 'headerLeft' option to override the native behavior.`;\n\n      console.error(message);\n    }\n  }, [dismissedRouteName]);\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const previousKey = state.routes[index - 1]?.key;\n        const previousDescriptor = previousKey\n          ? descriptors[previousKey]\n          : undefined;\n\n        return (\n          <SceneView\n            key={route.key}\n            index={index}\n            descriptor={descriptor}\n            previousDescriptor={previousDescriptor}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={(event) => {\n              navigation.dispatch({\n                ...StackActions.pop(event.nativeEvent.dismissCount),\n                source: route.key,\n                target: state.key,\n              });\n\n              setNextDismissedKey(route.key);\n            }}\n          />\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}